import React, { useState, useEffect } from 'react';
import '@/app/styles/protectedSection.css';

interface ProtectedSectionProps {
    children: React.ReactNode;
    password: string;
    hint?: string;
    sessionDuration?: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5, 9999 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
}

const ProtectedSection: React.FC<ProtectedSectionProps> = ({
                                                               children,
                                                               password,
                                                               hint = "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞",
                                                               sessionDuration = 5
                                                           }) => {
    const [accessGranted, setAccessGranted] = useState(false);
    const [inputPassword, setInputPassword] = useState('');
    const [error, setError] = useState('');
    const [showHint, setShowHint] = useState(false);
    const [attempts, setAttempts] = useState(3);
    const [isBlocked, setIsBlocked] = useState(false);
    const [blockTimeLeft, setBlockTimeLeft] = useState(0);
    const [sessionTimeLeft, setSessionTimeLeft] = useState(0);
    const isUnlimited = sessionDuration === 9999;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–æ–ª—è
    const sessionKey = `protected_section_${btoa(password).substring(0, 10)}`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        const savedSession = sessionStorage.getItem(sessionKey);
        if (savedSession) {
            const sessionData = JSON.parse(savedSession);
            const now = Date.now();

            if (isUnlimited || now < sessionData.expiresAt) {
                setAccessGranted(true);
                if (!isUnlimited) {
                    const timeLeft = Math.floor((sessionData.expiresAt - now) / 1000);
                    setSessionTimeLeft(timeLeft);
                }
            } else {
                // –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                sessionStorage.removeItem(sessionKey);
            }
        }
    }, [sessionKey, isUnlimited]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    useEffect(() => {
        let interval: NodeJS.Timeout;

        if (isBlocked && blockTimeLeft > 0) {
            interval = setInterval(() => {
                setBlockTimeLeft(prev => {
                    if (prev <= 1) {
                        setIsBlocked(false);
                        setAttempts(3);
                        setError('');
                        return 0;
                    }
                    return prev - 1;
                });
            }, 1000);
        }

        return () => {
            if (interval) {
                clearInterval(interval);
            }
        };
    }, [isBlocked, blockTimeLeft]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
    useEffect(() => {
        let interval: NodeJS.Timeout;

        if (accessGranted && !isUnlimited && sessionTimeLeft > 0) {
            interval = setInterval(() => {
                setSessionTimeLeft(prev => {
                    if (prev <= 1) {
                        // –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞
                        setAccessGranted(false);
                        sessionStorage.removeItem(sessionKey);
                        return 0;
                    }
                    return prev - 1;
                });
            }, 1000);
        }

        return () => {
            if (interval) {
                clearInterval(interval);
            }
        };
    }, [accessGranted, sessionTimeLeft, sessionKey, isUnlimited]);

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –¥–æ—Å—Ç—É–ø
        if (isBlocked) {
            return;
        }

        if (inputPassword.trim() === password) {
            setAccessGranted(true);
            setError('');
            setInputPassword('');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            const sessionData = {
                expiresAt: isUnlimited ? Date.now() + 100 * 365 * 24 * 60 * 60 * 1000 : Date.now() + (sessionDuration * 60 * 1000),
                grantedAt: Date.now()
            };

            sessionStorage.setItem(sessionKey, JSON.stringify(sessionData));
            if (!isUnlimited) {
                setSessionTimeLeft(sessionDuration * 60);
            }
        } else {
            const newAttempts = attempts - 1;
            setAttempts(newAttempts);

            if (newAttempts <= 0) {
                setIsBlocked(true);
                setBlockTimeLeft(30); // 30 —Å–µ–∫—É–Ω–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                setError('–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                setInputPassword('');
            } else {
                setError(`–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${newAttempts}`);
                setInputPassword('');
            }
        }
    };

    const handleLogout = () => {
        setAccessGranted(false);
        setSessionTimeLeft(0);
        sessionStorage.removeItem(sessionKey);
    };

    const formatTime = (seconds: number) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    };

    // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (accessGranted) {
        return (
            <div>
                <div className="session-indicator">
                    <span>
                        üîì –°–µ—Å—Å–∏—è: {isUnlimited ? '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è' : formatTime(sessionTimeLeft)}
                    </span>
                    <button
                        onClick={handleLogout}
                        className="session-logout-button"
                    >
                        –í—ã–π—Ç–∏
                    </button>
                </div>
                {children}
            </div>
        );
    }

    return (
        <div className="protected-section">
            <div className="protected-container">
                <div className="protected-header">
                    <div className="protected-icon">üîí</div>
                    <h3 className="protected-title">–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h3>
                    <p className="protected-description">
                        –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.
                    </p>
                    <p className="session-duration-info">
                        –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω {isUnlimited ? '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏' : `–Ω–∞ ${sessionDuration} –º–∏–Ω.`}
                    </p>
                </div>

                <form onSubmit={handleSubmit} className="protected-form">
                    <div className="input-container">
                        <input
                            type="password"
                            value={inputPassword}
                            onChange={(e) => setInputPassword(e.target.value)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                            className="protected-input"
                            disabled={isBlocked}
                            required
                        />
                    </div>

                    {error && (
                        <div className="error-message">
                            {isBlocked && blockTimeLeft > 0
                                ? `–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${blockTimeLeft} —Å–µ–∫.`
                                : error
                            }
                        </div>
                    )}

                    <div className="form-controls">
                        <button
                            type="button"
                            className="hint-button"
                            onClick={() => setShowHint(!showHint)}
                            disabled={isBlocked}
                        >
                            <span className="hint-icon">‚ÑπÔ∏è</span>
                            {showHint ? '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É'}
                        </button>

                        <button
                            type="submit"
                            className="submit-button"
                            disabled={isBlocked || !inputPassword.trim()}
                        >
                            {isBlocked ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ' : '–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø'}
                        </button>
                    </div>

                    {showHint && (
                        <div className="hint-container">
                            <p className="hint-text">
                                <span className="hint-icon">üí°</span>
                                –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}
                            </p>
                        </div>
                    )}

                    {!isBlocked && attempts < 3 && (
                        <div className="attempts-counter">
                            –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}
                        </div>
                    )}
                </form>
            </div>
        </div>
    );
};

export default ProtectedSection;
